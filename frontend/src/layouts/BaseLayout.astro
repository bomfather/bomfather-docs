---
import '../styles/global.css';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import AnnouncementBanner from '../components/AnnouncementBanner.astro';

export interface Props {
  title: string;
  description: string;
  showHeader?: boolean; // whether to render the navigation header, default true
  showAnnouncement?: boolean; // whether to render the announcement banner, default true
  showNewsletter?: boolean; // whether to render the newsletter subscription, default true
}

const { title, description, showHeader = true, showAnnouncement = true, showNewsletter = true } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="light">
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title} | Bomfather</title>
    
    <!-- Preload fonts -->
    <!-- Professional fonts: Inter for headings, Fira Code for body text -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Fira+Code:wght@300;400;500;600&display=swap" rel="stylesheet">
    
    <!-- ConvertKit Form Script -->
    <script src="https://f.convertkit.com/ckjs/ck.5.js"></script>

    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-DK3MD3RFN4"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-DK3MD3RFN4');
    </script>
  </head>
  <body class="bg-background text-text-secondary">
    {showAnnouncement ? <AnnouncementBanner /> : null}
    {showHeader ? <Header /> : null}
    
    <main>
      <slot />
    </main>
    
    {showNewsletter && (
      <section class="newsletter-section">
      <div class="newsletter-container">
        <div class="newsletter-content">
          <div class="newsletter-header">
            <h2 class="newsletter-title">REMOVED</h2>
            <p class="newsletter-subtitle">From TPM-sealed flight recorders to zero-trust builds: deep dives on eBPF, AI & supply-chain security.</p>
          </div>
          
          <div class="newsletter-form-wrapper">
            <div id="form-container">
              <form id="newsletter-form" class="newsletter-form">
                <div class="form-group">
                  <input 
                    type="email" 
                    id="email-input"
                    placeholder="Enter your email address" 
                    required 
                    class="email-input"
                  />
                  <button 
                    type="submit"
                    class="subscribe-button"
                  >
                    Subscribe
                    <svg class="button-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  </button>
                </div>
              </form>
            </div>
            
            <div id="success-message" class="success-message hidden">
              <div class="success-content">
                <div class="success-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </div>
                <h3 class="success-title">Thank you for signing up!</h3>
                <p class="success-text">We've sent a confirmation email to your inbox.</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    )}
    
    <Footer />
    
    {showNewsletter && (
      <script>
      // Cache busting timestamp
      const timestamp = new Date().getTime();
      console.log('Form script loaded with timestamp:', timestamp);
      
      document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('newsletter-form');
        const formContainer = document.getElementById('form-container');
        const successMessage = document.getElementById('success-message');
        
        console.log('Form found:', !!form);
        
        if (form) {
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            console.log('Form submitted, timestamp:', timestamp);
            
            const emailInput = document.getElementById('email-input');
            const email = emailInput.value;
            
            if (!email) return;
            
            try {
              console.log('Submitting to Netlify function...');
              
              // Display submission attempt
              const submitBtn = form.querySelector('button[type="submit"]');
              const originalBtnText = submitBtn.innerHTML;
              submitBtn.innerHTML = 'Submitting...';
              submitBtn.disabled = true;
              
              // Add cache busting parameter to request URL
              const functionUrl = `/.netlify/functions/newsletter-subscribe?_=${timestamp}`;
              
              const response = await fetch(functionUrl, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Cache-Control': 'no-cache, no-store',
                  'Pragma': 'no-cache'
                },
                body: JSON.stringify({ 
                  email,
                  timestamp // Include timestamp in the request body as well
                }),
              });
              
              let responseText = await response.text();
              let result = JSON.parse(responseText);
              
              if (result && result.success) {
                // Show success message
                console.log('Subscription successful!');
                formContainer.classList.add('hidden');
                successMessage.classList.remove('hidden');
              } else {
                console.log(`Submission failed: ${result ? (result.error || 'Unknown error') : 'No result'}`);
                alert('There was an error subscribing. Please try again.');
                
                // Reset button
                submitBtn.innerHTML = originalBtnText;
                submitBtn.disabled = false;
              }
            } catch (error) {
              console.log(`Submission error: ${error.message}`);
              alert(`Error: ${error.message || 'There was a problem with your subscription.'}`);
              
              // Reset form if there was an error
              const submitBtn = form.querySelector('button[type="submit"]');
              if (submitBtn.disabled) {
                submitBtn.innerHTML = 'Subscribe';
                submitBtn.disabled = false;
              }
            }
          });
        }
      });
    </script>
    

    )}
    
    <script>
      // Add a class to body when announcement banner is visible
      document.addEventListener('DOMContentLoaded', () => {
        const banner = document.getElementById('announcement-banner');
        
        if (banner) {
          // Initial check
          if (banner.classList.contains('show')) {
            document.body.classList.add('has-announcement');
          }
          
          // Watch for changes
          const observer = new MutationObserver(() => {
            if (banner.classList.contains('show')) {
              document.body.classList.add('has-announcement');
            } else {
              document.body.classList.remove('has-announcement');
            }
          });
          
          observer.observe(banner, { attributes: true, attributeFilter: ['class'] });
        }
      });
    </script>
    
    {showNewsletter && (
      <style>
      .newsletter-section {
        background: var(--color-surface-secondary);
        border-top: 1px solid var(--color-border-light);
        padding: 4rem 0;
        position: relative;
      }
      
      .newsletter-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: transparent;
        pointer-events: none;
      }
      
      .newsletter-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 0 1.5rem;
        position: relative;
        z-index: 1;
      }
      
      .newsletter-content {
        text-align: center;
      }
      
      .newsletter-header {
        margin-bottom: 3rem;
      }
      
      .newsletter-title {
        font-size: clamp(2rem, 4vw, 3rem);
        font-weight: 700;
        margin-bottom: 1rem;
        color: var(--color-text-primary);
        line-height: 1.2;
      }
      
      .newsletter-subtitle {
        font-size: clamp(1rem, 2vw, 1.25rem);
        color: var(--color-text-secondary);
        line-height: 1.6;
        max-width: 600px;
        margin: 0 auto;
      }
      
      .newsletter-form-wrapper {
        max-width: 500px;
        margin: 0 auto;
      }
      
      .newsletter-form {
        background: transparent;
        border: none;
        border-radius: 1rem;
        padding: 1.5rem;
        transition: all 0.3s ease;
      }
      
      .newsletter-form:hover {
        border-color: transparent;
        box-shadow: none;
      }
      
      .form-group {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }
      
      .email-input {
        width: 100%;
        padding: 1rem 1.25rem;
        border: 1px solid var(--color-border-medium);
        background: var(--color-background);
        color: var(--color-text-primary);
        border-radius: 0.75rem;
        font-size: 1rem;
        transition: all 0.3s ease;
      }
      
      .email-input::placeholder {
        color: var(--color-text-muted);
      }
      
      .email-input:focus {
        outline: none;
        border-color: var(--color-primary);
        box-shadow: 0 0 0 3px rgba(11, 95, 255, 0.1);
        background: var(--color-background);
      }
      
      .subscribe-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        width: 100%;
        padding: 1rem 1.25rem;
        background: var(--color-primary);
        color: white;
        border: none;
        border-radius: 0.75rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 14px rgba(11, 95, 255, 0.3);
      }
      
      .subscribe-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(11, 95, 255, 0.4);
      }
      
      .subscribe-button:active {
        transform: translateY(0);
      }
      
      .button-icon {
        transition: transform 0.3s ease;
      }
      
      .subscribe-button:hover .button-icon {
        transform: translateX(2px);
      }
      
      .success-message {
        background: rgba(34, 197, 94, 0.1);
        border: 1px solid rgba(34, 197, 94, 0.2);
        border-radius: 1rem;
        padding: 2rem;
        backdrop-filter: blur(10px);
      }
      
      .success-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
      }
      
      .success-icon {
        color: #22c55e;
      }
      
      .success-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #ffffff;
        margin: 0;
      }
      
      .success-text {
        color: #a1a1aa;
        margin: 0;
        text-align: center;
      }
      
      /* Responsive Design */
      @media (min-width: 768px) {
        .form-group {
          flex-direction: row;
          align-items: center;
        }
        
        .email-input {
          flex: 1;
        }
        
        .subscribe-button {
          width: auto;
          white-space: nowrap;
          flex-shrink: 0;
        }
      }
      
      @media (max-width: 767px) {
        .newsletter-section {
          padding: 3rem 0;
        }
        
        .newsletter-container {
          padding: 0 1rem;
        }
        
        .newsletter-form {
          padding: 1.25rem;
        }
      }
    </style>
    )}
  </body>
</html> 