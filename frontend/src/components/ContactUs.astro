---
// ContactUs.astro - Contact form and appointment scheduling component
---

<section class="py-16 bg-background text-white">
  <div class="container">
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold font-heading mb-4">Get in Touch</h2>
      <p class="text-lg text-gray max-w-3xl mx-auto">
        Have questions about Bomfather? Reach out to our team or schedule a demo.
      </p>
    </div>
    
    <div class="grid md:grid-cols-2 gap-8 lg:gap-12">
      <!-- Contact Form -->
      <div class="bg-background p-8 rounded-lg border border-gray-700 shadow-xl">
        <h3 class="text-2xl font-bold text-white mb-6">Send us a Message</h3>
        
        <form id="contact-form" class="space-y-6" name="contact" method="POST" data-netlify="true" data-netlify-recaptcha="true">
          <!-- Netlify Forms hidden field -->
          <input type="hidden" name="form-name" value="contact" />
          
          <div>
            <label for="name" class="block text-gray mb-2">Name</label>
            <input 
              type="text" 
              id="name" 
              name="name" 
              required
              class="w-full px-4 py-2 border border-gray-700 bg-background text-white rounded-lg focus:ring-2 focus:ring-primary focus:border-primary"
            />
          </div>
          
          <div>
            <label for="email" class="block text-gray mb-2">Email</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required
              class="w-full px-4 py-2 border border-gray-700 bg-background text-white rounded-lg focus:ring-2 focus:ring-primary focus:border-primary"
            />
          </div>
          
          <div>
            <label for="subject" class="block text-gray mb-2">Subject</label>
            <input 
              type="text" 
              id="subject" 
              name="subject"
              class="w-full px-4 py-2 border border-gray-700 bg-background text-white rounded-lg focus:ring-2 focus:ring-primary focus:border-primary"
            />
          </div>
          
          <div>
            <label for="message" class="block text-gray mb-2">Message</label>
            <textarea 
              id="message" 
              name="message" 
              rows="4" 
              required
              class="w-full px-4 py-2 border border-gray-700 bg-background text-white rounded-lg focus:ring-2 focus:ring-primary focus:border-primary"
            ></textarea>
          </div>
          
          <div class="text-sm text-gray mb-4">
            <p>This form uses Netlify Forms. Your message will be securely delivered to the site administrators.</p>
          </div>
          
          <div data-netlify-recaptcha="true"></div>
          
          <button 
            type="submit" 
            class="w-full bg-primary hover:bg-accent text-white font-medium py-3 px-6 rounded-lg transition-colors"
          >
            Send Message
          </button>
        </form>
        
        <div id="form-success" class="hidden mt-4 p-4 bg-accent-green/20 border border-accent-green text-accent-green rounded-lg">
          Thank you for your message! We'll get back to you as soon as possible.
        </div>
        
        <div id="form-error" class="hidden mt-4 p-4 bg-accent-red/20 border border-accent-red text-accent-red rounded-lg">
          There was an error sending your message. Please try again later.
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Form handling with Netlify Forms
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form');
    const successMessage = document.getElementById('form-success');
    const errorMessage = document.getElementById('form-error');
    
    if (form) {
      // For local development, just show success message
      if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          
          try {
            // Simulate form submission in development
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // Show success message
            if (successMessage) {
              successMessage.classList.remove('hidden');
              form.reset();
              
              // Hide success message after 5 seconds
              setTimeout(() => {
                successMessage.classList.add('hidden');
              }, 5000);
            }
          } catch (error) {
            // Show error message
            if (errorMessage) {
              errorMessage.classList.remove('hidden');
              
              // Hide error message after 5 seconds
              setTimeout(() => {
                errorMessage.classList.add('hidden');
              }, 5000);
            }
          }
        });
      } else {
        // In production with Netlify Forms
        // Handle the AJAX submission
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          
          try {
            // Get form data
            const formData = new FormData(form);
            
            // Submit the form data using fetch
            const response = await fetch('/', {
              method: 'POST',
              headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
              body: new URLSearchParams(formData).toString()
            });
            
            if (response.ok) {
              // Show success message
              if (successMessage) {
                successMessage.classList.remove('hidden');
                form.reset();
                
                // Hide success message after 5 seconds
                setTimeout(() => {
                  successMessage.classList.add('hidden');
                }, 5000);
              }
            } else {
              throw new Error('Network response was not ok');
            }
          } catch (error) {
            // Show error message
            if (errorMessage) {
              errorMessage.classList.remove('hidden');
              
              // Hide error message after 5 seconds
              setTimeout(() => {
                errorMessage.classList.add('hidden');
              }, 5000);
            }
          }
        });
      }
    }
  });
</script> 