---
// components/sections/Hero.astro
interface Props {
  title: string;
  subtitle: string;
  primaryCTA?: { text: string; href: string };
  secondaryCTA?: { text: string; href: string };
  tableOfContents?: { 
    items: Array<{ label: string; href: string }> 
  };
  metrics: Array<{ value: string; label: string }>;
  heroImage?: string;
}

const {
  title,
  subtitle,
  primaryCTA,
  secondaryCTA,
  tableOfContents,
  metrics,
  heroImage
} = Astro.props;
---

<section class="hero-section">
  <div class="container">
    <div class={`hero-content ${!heroImage ? 'hero-content--centered' : ''}`}>
      <div class="hero-text">
        <h1 class="hero-title">
          {title}
        </h1>
        
        <p class="hero-subtitle">
          {subtitle}
        </p>
        
        {(primaryCTA || secondaryCTA) && (
        <div class="hero-actions">
            {primaryCTA && (
          <a href={primaryCTA.href} class="btn btn-primary">
            {primaryCTA.text}
          </a>
            )}
            {secondaryCTA && (
          <a href={secondaryCTA.href} class="btn btn-secondary">
            {secondaryCTA.text}
          </a>
            )}
          </div>
        )}
        
        {tableOfContents && (
          <div class="hero-toc">
            <nav class="toc-nav">
              {tableOfContents.items.map((item, index) => (
                <>
                  <a 
                    href={item.href} 
                    class="toc-link"
                    style={`--delay: ${index * 0.1}s`}
                  >
                    {item.label}
                  </a>
                  {index < tableOfContents.items.length - 1 && (
                    <span class="toc-separator">â€¢</span>
                  )}
                </>
              ))}
            </nav>
        </div>
        )}
        
        <div class="hero-metrics">
          {metrics.map((metric) => (
            <div class="metric">
              <div class="metric-value">{metric.value}</div>
              <div class="metric-label">{metric.label}</div>
            </div>
          ))}
        </div>
      </div>
      
      {heroImage && (
        <div class="hero-visual">
          <img src={heroImage} alt="Product demonstration" class="hero-image" />
        </div>
      )}
    </div>
  </div>
</section>

<style>
.hero-section {
  position: relative;
  background: #0a0d15;
  color: white;
  padding: 8rem 0 6rem;
  overflow: hidden;
  min-height: 100vh;
  display: flex;
  align-items: center;
}

.hero-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: #0a0d15;
  pointer-events: none;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1.5rem;
  width: 100%;
}

.hero-content {
  display: grid;
  grid-template-columns: 1fr;
  gap: 3rem;
  align-items: center;
  position: relative;
  z-index: 1;
  width: 100%;
  min-height: calc(100vh - 16rem);
}

.hero-content--centered {
  text-align: center;
  max-width: 900px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.hero-content--centered .hero-text {
  display: flex;
  flex-direction: column;
  height: 100%;
  justify-content: center;
}

.hero-content--centered .hero-subtitle {
  max-width: none;
  margin-left: auto;
  margin-right: auto;
}

.hero-content--centered .hero-actions {
  justify-content: center;
}

.hero-content--centered .hero-metrics {
  justify-content: center;
}

.hero-content--centered .hero-toc {
  margin-top: auto;
  margin-bottom: 0;
}

.hero-title {
  font-size: clamp(3rem, 6vw, 5rem);
  font-weight: 700;
  line-height: 1.1;
  margin-bottom: 1.5rem;
  background: linear-gradient(135deg, #ffffff 0%, #a1a1aa 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.hero-subtitle {
  font-size: clamp(1.25rem, 2.5vw, 1.5rem);
  line-height: 1.6;
  color: #a1a1aa;
  margin-bottom: 2.5rem;
  max-width: 700px;
}

.hero-actions {
  display: flex;
  gap: 1rem;
  margin-bottom: 3rem;
  flex-wrap: wrap;
}

.btn {
  display: inline-flex;
  align-items: center;
  padding: 1rem 2.5rem;
  border-radius: 0.5rem;
  font-weight: 600;
  text-decoration: none;
  transition: all 0.2s ease;
  border: 1px solid transparent;
  font-size: 1.125rem;
}

.btn-primary {
  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  color: white;
  box-shadow: 0 4px 14px rgba(59, 130, 246, 0.3);
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
}

.btn-secondary {
  background: transparent;
  color: white;
  border-color: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
}

.btn-secondary:hover {
  background: rgba(255, 255, 255, 0.1);
  border-color: rgba(255, 255, 255, 0.3);
}

.hero-metrics {
  display: flex;
  gap: 3rem;
  flex-wrap: wrap;
}

.metric {
  text-align: center;
}

.metric-value {
  font-size: 2rem;
  font-weight: 700;
  color: #3b82f6;
  margin-bottom: 0.5rem;
}

.metric-label {
  font-size: 0.875rem;
  color: #71717a;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.hero-toc {
  margin-top: auto;
  margin-bottom: 0;
  padding-top: 3rem;
  display: flex;
  justify-content: center;
}

.toc-nav {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  justify-content: center;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 2rem;
  padding: 0.75rem 1.5rem;
  backdrop-filter: blur(10px);
  white-space: nowrap;
  overflow-x: auto;
}

.toc-link {
  color: #d1d5db;
  text-decoration: none;
  font-size: 0.95rem;
  font-weight: 500;
  padding: 0.5rem 1rem;
  border-radius: 1.5rem;
  transition: all 0.3s ease;
  opacity: 0;
  animation: fadeInUp 0.6s ease-out forwards;
  animation-delay: var(--delay, 0s);
  white-space: nowrap;
}

.toc-link:hover {
  color: #60a5fa;
  background: rgba(96, 165, 250, 0.1);
  transform: translateY(-2px);
}

.toc-separator {
  color: rgba(255, 255, 255, 0.3);
  font-weight: bold;
  user-select: none;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@media (max-width: 768px) {
  .hero-content {
    min-height: calc(100vh - 12rem);
  }
  
  .toc-nav {
    gap: 0.5rem;
    padding: 0.6rem 1rem;
    justify-content: flex-start;
  }
  
  .toc-link {
    font-size: 0.875rem;
    padding: 0.4rem 0.6rem;
  }
  
  .hero-toc {
    padding-top: 2rem;
  }
}

.hero-visual {
  display: flex;
  justify-content: center;
  align-items: center;
}

.hero-image {
  max-width: 100%;
  height: auto;
  border-radius: 1rem;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

@media (min-width: 768px) {
  .hero-content {
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
  }
  
  .hero-content--centered {
    grid-template-columns: 1fr;
  }
  
  .hero-actions {
    flex-wrap: nowrap;
  }
  
  .hero-metrics {
    gap: 4rem;
  }
}

@media (min-width: 1024px) {
  .hero-section {
    padding: 10rem 0 8rem;
  }
  
  .hero-content {
    gap: 6rem;
  }
  
  .hero-metrics {
    gap: 5rem;
  }
}

@media (max-width: 768px) {
  .hero-section {
    min-height: 90vh;
    padding: 6rem 0 4rem;
  }
  
  .hero-metrics {
    gap: 2rem;
  }
  
  .metric-value {
    font-size: 1.5rem;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .hero-title {
    -webkit-text-fill-color: white;
    background: none;
  }
  
  .btn {
    border-width: 2px;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .btn {
    transition: none;
  }
  
  .btn-primary:hover {
    transform: none;
  }
}
</style> 