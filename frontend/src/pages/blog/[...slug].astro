---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PageSection from '../../components/ui/PageSection.astro';
import { getCollection } from 'astro:content';

// Generate static paths for all blog posts
export async function getStaticPaths() {
  const blogPosts = await getCollection('blog', ({ data }) => {
    return !data.draft;
  });

  return blogPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

// Format date for display (UTC to prevent off-by-one day)
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    timeZone: 'UTC',
  });
};
---

<BaseLayout 
  title={post.data.title}
  description={post.data.description}
  showNewsletter={false}
>
  <!-- Blog Post Header -->
  <PageSection 
    id="blog-post-header"
    variant="dark"
    size="md"
    className="blog-post-header-section"
  >
    <div class="blog-post-header animate-on-scroll">
      <h1 class="blog-post-title">{post.data.title}</h1>
      <p class="blog-post-description">{post.data.description}</p>
      
      <div class="blog-post-breadcrumb">
        <a href="/blog" class="breadcrumb-link">‚Üê Back to Blog</a>
      </div>
      
      <div class="blog-post-meta">
        <time class="blog-post-date">{formatDate(post.data.publishedAt)}</time>
        <span class="blog-post-author">by {post.data.author}</span>
      </div>
    </div>
  </PageSection>

  <!-- Featured Image (if present) -->
  {post.data.featuredImage && (
    <PageSection 
      id="blog-post-image"
      variant="dark"
      size="lg"
      className="blog-post-image-section"
    >
      <div class="blog-post-image-container animate-on-scroll">
        <img 
          src={post.data.featuredImage} 
          alt={post.data.title}
          class="blog-post-featured-image"
        />
      </div>
    </PageSection>
  )}

  <!-- Blog Post Content -->
  <PageSection 
    id="blog-post-content"
    variant="dark"
    size="lg"
    className="blog-post-content-section"
  >
    <article class="blog-post-article animate-on-scroll">
      <div class="prose prose-invert prose-lg">
        <Content />
      </div>
    </article>
  </PageSection>

  <!-- Related Posts Call-to-Action -->
  <PageSection 
    id="blog-post-cta"
    variant="dark"
    size="md"
    className="blog-post-cta-section"
  >
    <div class="blog-post-cta animate-on-scroll">
      <div class="cta-tile">
        <a href="/blog" class="cta-tile-link">
          <div class="cta-text">
            <h3 class="cta-title">Keep Reading</h3>
            <p class="cta-description">Explore more insights on AI security, eBPF technology, and kernel-level protection.</p>
          </div>
          <div class="cta-actions">
            <span class="arrow-link-text">View All Articles</span>
            <svg class="arrow-link-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" aria-hidden="true">
              <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
        </a>
      </div>
    </div>
  </PageSection>
</BaseLayout>

<style is:global>
  .blog-post-header-section.page-section--md {
    background: transparent;
    border-bottom: 1px solid var(--color-border-light);
    padding-top: 8rem !important; /* Override PageSection default and add space from the fixed header */
  }

  .blog-post-header {
    max-width: 800px;
    margin: 0 auto;
    text-align: left;
  }

  .blog-post-breadcrumb {
    margin-bottom: 24px;
  }

  .breadcrumb-link {
    color: #DA6A47; /* warm external-link color */
    font-size: 0.875rem;
    font-weight: 500;
    transition: color 0.15s ease;
    text-decoration: none;
  }

  .breadcrumb-link:hover { color: #f8af6e; }

  .blog-post-meta {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 16px;
    margin-bottom: 24px;
    font-size: 14px;
    color: #71717a;
  }

  .blog-post-date {
    color: #a1a1aa;
  }

  .blog-post-author {
    color: #71717a;
  }

  .blog-post-title {
    font-size: 2.25rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    line-height: 1.25;
    background: linear-gradient(135deg, #111827 0%, #9CA3AF 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  @media (min-width: 768px) {
    .blog-post-title {
      font-size: 3rem;
    }
    .blog-post-header-section.page-section--md {
      padding-top: 9.5rem !important;
    }
    /* Slightly more breathing room on larger screens but still tight */
    .blog-post-content-section.page-section--lg { padding-bottom: 2rem !important; }
    .blog-post-cta-section.page-section--md { padding-top: 2rem !important; }
  }

  .blog-post-description {
    font-size: 1.25rem;
    color: var(--color-text-secondary);
    line-height: 1.625;
    margin-bottom: 2rem;
    max-width: 600px;
  }

  .blog-post-image-section { background: transparent; padding-top: 0; }

  .blog-post-image-container {
    max-width: 1000px;
    margin: 0 auto;
  }

  .blog-post-featured-image {
    width: 100%;
    height: auto;
    border-radius: 16px;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1);
  }

  .blog-post-content-section { background: transparent; }
  /* Tighten gap between content and CTA */
  .blog-post-content-section.page-section--lg { padding-bottom: 1.5rem !important; }
  .blog-post-cta-section.page-section--md { padding-top: 1.5rem !important; padding-bottom: 2rem !important; }

  .blog-post-article {
    max-width: 800px;
    margin: 0 auto;
  }

  /* Prose styling for blog content */
  .prose { color: var(--color-text-secondary); line-height: 1.75; font-size: 1rem; max-width: none; }

  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 { color: var(--color-text-primary); font-weight: 700; margin-top: 2.5em; margin-bottom: 1em; line-height: 1.3; }

  .prose h1:first-child,
  .prose h2:first-child,
  .prose h3:first-child {
    margin-top: 0;
  }

  .prose h1 {
    font-size: 2.25rem;
    line-height: 1.2;
    margin-bottom: 1.5rem;
  }

  .prose h2 { font-size: 1.875rem; line-height: 1.3; border-bottom: 2px solid var(--color-border-light); padding-bottom: 0.75rem; margin-bottom: 1.5rem; margin-top: 3rem; }

  .prose h3 {
    font-size: 1.5rem;
    line-height: 1.4;
    margin-bottom: 1rem;
    margin-top: 2.5rem;
  }

  .prose h4 {
    font-size: 1.25rem;
    line-height: 1.5;
    margin-bottom: 0.75rem;
    margin-top: 2rem;
  }

  .prose h5 {
    font-size: 1.125rem;
    line-height: 1.5;
    margin-bottom: 0.5rem;
    margin-top: 1.5rem;
  }

  .prose h6 {
    font-size: 1rem;
    line-height: 1.5;
    margin-bottom: 0.5rem;
    margin-top: 1.5rem;
    color: #cbd5e1;
  }

  .prose p {
    margin-bottom: 1.5em;
    line-height: 1.75;
  }

  .prose p:last-child {
    margin-bottom: 0;
  }

  .prose strong { color: var(--color-text-primary); font-weight: 600; }

  .prose em { font-style: italic; color: #6b7280; }

  .prose a { color: #2563eb; text-decoration: underline; text-decoration-color: rgba(37, 99, 235, 0.2); transition: all 0.2s ease; font-weight: 500; }

  .prose a:hover { color: #1d4ed8; text-decoration-color: rgba(29, 78, 216, 0.4); }

  .prose ul,
  .prose ol {
    margin: 1.5em 0;
    padding-left: 1.75em;
  }

  .prose ul {
    list-style-type: disc;
  }

  .prose ol {
    list-style-type: decimal;
  }

  .prose li {
    margin: 0.75em 0;
    line-height: 1.6;
  }

  .prose li p {
    margin: 0.5em 0;
  }

  .prose li:first-child {
    margin-top: 0;
  }

  .prose li:last-child {
    margin-bottom: 0;
  }

  .prose ul ul,
  .prose ol ol,
  .prose ul ol,
  .prose ol ul {
    margin: 0.75em 0;
  }

  /* Blog code blocks: match homepage code block styling */
  .prose pre { background: #1e293b; border: 1px solid #334155; border-radius: 12px; padding: 1.5em; overflow-x: auto; margin: 2em 0; font-family: 'JetBrains Mono', monospace; font-size: 0.875rem; line-height: 1.6; box-shadow: none; }
  /* Remove global pre overlay gradient for blog content */
  .prose pre::before { content: none !important; background: none !important; }

  .prose code { background: #f3f4f6; border: 1px solid var(--color-border-light); border-radius: 6px; padding: 0.25em 0.5em; font-family: 'JetBrains Mono', monospace; font-size: 0.875em; color: #111827; font-weight: 500; }

  .prose pre code {
    background: none;
    border: none;
    padding: 0;
    color: #e5e7eb;
    border-radius: 0;
  }

  .prose blockquote { border-left: 4px solid #2563eb; padding-left: 1.5em; margin: 2em 0; font-style: italic; color: #374151; background: #eef2ff; padding: 1em 1.5em; border-radius: 0 8px 8px 0; }

  .prose blockquote p {
    margin: 0;
  }

  .prose hr { border: none; border-top: 2px solid var(--color-border-light); margin: 3em 0; }

  .prose table {
    border-collapse: collapse;
    width: 100%;
    margin: 2em 0;
    font-size: 0.875rem;
  }

  .prose th,
  .prose td { border: 1px solid var(--color-border-light); padding: 0.75em 1em; text-align: left; }

  .prose th { background: #f9fafb; font-weight: 600; color: #111827; }

  .prose img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    margin: 2em 0;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  /* Mermaid diagrams */
  .prose .mermaid { margin: 2em 0; display: flex; justify-content: center; }
  .prose .mermaid svg { max-width: 100%; height: auto; margin: 0 auto; display: block; }

  .prose figure {
    margin: 2em 0;
  }

  .prose figcaption {
    color: #9ca3af;
    font-size: 0.875rem;
    text-align: center;
    margin-top: 0.5em;
    font-style: italic;
  }

  .blog-post-cta-section { background: transparent; border-top: none; }

  .blog-post-cta {
    max-width: 800px;
    margin: 0 auto;
  }

  /* CTA tile using same surface/shadow treatment as cards */
  .cta-tile {
    position: relative;
    border: 2px solid var(--color-border-strong);
    border-radius: 0;
    background: transparent;
    isolation: isolate;
  }

  .cta-tile::before {
    content: '';
    position: absolute;
    inset: 0;
    background: #ffffff; /* solid white surface */
    border-radius: inherit;
    z-index: -1;
  }

  .cta-tile::after {
    content: '';
    position: absolute;
    inset: 0;
    transform: translate(14px, 14px);
    background: rgba(100, 116, 139, 0.24);
    border-radius: inherit;
    z-index: -2;
  }

  .cta-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 32px;
  }

  /* Make the entire tile clickable and add padding like list cards */
  .cta-tile-link {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 24px;
    text-decoration: none;
    color: inherit;
    padding: 28px 32px;
  }

  .cta-text {
    flex: 1;
    text-align: left;
  }

  .cta-title { font-size: 1.875rem; font-weight: 700; color: var(--color-text-primary); margin-bottom: 0.5rem; }

  .cta-description { font-size: 1.125rem; color: var(--color-text-secondary); line-height: 1.625; margin-bottom: 0; }

  .cta-actions { flex-shrink: 0; }

  .cta-actions {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    color: #DA6A47;
    font-weight: 600;
    transition: transform 0.15s ease, color 0.15s ease;
  }

  .cta-tile-link:hover .cta-actions { color: #f8af6e; transform: translateX(4px); }
  .arrow-link-icon { transition: transform 0.15s ease; }
  .cta-tile-link:hover .arrow-link-icon { transform: translateX(2px); }

  /* Responsive design */
  @media (max-width: 768px) {
    .blog-post-title {
      font-size: 1.875rem;
    }
    
    .blog-post-description {
      font-size: 1.125rem;
    }
    
    .prose {
      font-size: 16px;
    }
    
    .prose h1 {
      font-size: 1.75rem;
    }
    
    .prose h2 {
      font-size: 1.5rem;
      margin-top: 2rem;
    }
    
    .prose h3 {
      font-size: 1.25rem;
      margin-top: 1.5rem;
    }

    .prose h4 {
      font-size: 1.125rem;
      margin-top: 1.25rem;
    }

    .prose pre {
      padding: 1rem;
      font-size: 0.8rem;
      border-radius: 8px;
    }

    .prose ul,
    .prose ol {
      padding-left: 1.25em;
    }

    .prose blockquote {
      padding: 0.75em 1em;
      margin: 1.5em 0;
    }
    
    .cta-tile-link { flex-direction: column; align-items: flex-start; gap: 16px; padding: 20px 24px; }
    .cta-text { text-align: left; }
    .cta-actions { align-self: flex-start; }
  }

  /* Animation */
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    animation: slideUpFade 0.6s ease forwards;
  }

  @keyframes slideUpFade {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Animate elements on scroll
  document.addEventListener('DOMContentLoaded', () => {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -10% 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-on-scroll');
        }
      });
    }, observerOptions);

    // Observe all animatable elements
    document.querySelectorAll('.blog-post-header, .blog-post-image-container, .blog-post-article, .blog-post-cta').forEach(element => {
      observer.observe(element);
    });
  });
</script> 

<script>
  // Render Mermaid diagrams from fenced code blocks
  (function() {
    const loadMermaid = () => new Promise((resolve) => {
      if (window.mermaid) return resolve(window.mermaid);
      const s = document.createElement('script');
      s.src = 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js';
      s.onload = () => resolve(window.mermaid);
      document.head.appendChild(s);
    });

    const convertBlocks = () => {
      const blocks = Array.from(document.querySelectorAll('pre > code, pre'));
      const mermaidStart = /^(graph|flowchart|sequenceDiagram|classDiagram|stateDiagram|erDiagram|journey|gantt)\b/;
      blocks.forEach((el) => {
        const isCode = el.tagName.toLowerCase() === 'code';
        const codeEl = isCode ? el : el.querySelector('code');
        const className = (codeEl && codeEl.className) || '';
        const langIsMermaid = className.includes('language-mermaid') || className.includes('lang-mermaid') || (codeEl && codeEl.getAttribute('data-language') === 'mermaid');
        const text = (codeEl ? codeEl.textContent : el.textContent) || '';
        const looksLikeMermaid = mermaidStart.test(text.trimStart());
        if (!(langIsMermaid || looksLikeMermaid)) return;

        const pre = isCode ? el.parentElement : el;
        if (!pre) return;
        const container = document.createElement('div');
        container.className = 'mermaid';
        container.textContent = text;
        pre.replaceWith(container);
      });
    };

    const sanitizeMermaidText = (text) => {
      if (!text) return '';
      let t = text
        .replace(/\u00A0/g, ' ') // nbsp ‚Üí space
        .replace(/\r/g, '')
        .trimStart();
      // Strip accidental fences
      t = t.replace(/^```mermaid\s*/i, '').replace(/```\s*$/i, '');
      // Ensure first directive is at top
      return t.trim();
    };

    const normalizeExistingMermaidBlocks = () => {
      document.querySelectorAll('.mermaid').forEach((el) => {
        const raw = el.textContent || '';
        const cleaned = sanitizeMermaidText(raw);
        if (cleaned !== raw) {
          el.textContent = cleaned;
        }
      });
    };

    const init = async () => {
      const mermaid = await loadMermaid();
      convertBlocks();
      normalizeExistingMermaidBlocks();
      try {
        mermaid.initialize({ startOnLoad: false, securityLevel: 'loose' });
        mermaid.run({ querySelector: '.mermaid' });
      } catch (e) {
        console.error('Mermaid init failed', e);
      }
    };

    const ready = () => {
      init();
      // Re-run if content is injected/rehydrated later
      const target = document.querySelector('.blog-post-article') || document.body;
      if (!target) return;
      const mo = new MutationObserver(() => {
        convertBlocks();
        normalizeExistingMermaidBlocks();
        if (window.mermaid) {
          try { window.mermaid.run({ querySelector: '.mermaid' }); } catch {}
        }
      });
      mo.observe(target, { childList: true, subtree: true });
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', ready);
    } else {
      ready();
    }
  })();
  </script>