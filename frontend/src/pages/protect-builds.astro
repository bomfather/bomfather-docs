---
import BaseLayout from '../layouts/BaseLayout.astro';
import Hero from '../components/sections/Hero.astro';
import PageSection from '../components/ui/PageSection.astro';
import Card from '../components/ui/Card.astro';

// Build Protection content structured like AI security page
const pageContent = {
  hero: {
    title: "Build Protection That Prevents, Not Just Detects",
    subtitle: "Traditional tools scan your manifest files. But they have no idea what actually happened during your build. By the time your code ships, the damage is already done.",
    primaryCTA: { text: "Contact Us", href: "mailto:contact@bomfather.dev" },
    secondaryCTA: { text: "Learn More", href: "#problem" },
    metrics: []
  },

  attackVectors: {
    title: "The SBOM Reality Check: Intent vs. Reality",
    build: {
      header: "Traditional SBOMs vs. Kernel-Level Reality",
      headerDescription: "Traditional tools scan manifest files but can't see post-install scripts, compiler hijacks, or build-time attacks that happen at the kernel level.",
      traditional: {
        title: "Traditional SBOM (from manifests)",
        description: "Traditional tools scan your package.json, go.mod, requirements.txt. But they can't see the post-install script that exfiltrated your AWS keys, the compiler that was hijacked to inject backdoors, or the build tool that copied your source to an S3 bucket.",
        problems: [
          "Completely blind to build execution",
          "Trust that nothing malicious runs in post-install scripts", 
          "Generate SBOMs from manifest files only",
          "Miss everything that actually matters during build time"
        ]
      },
      bomfather: {
        title: "Bomfather SBOM (from kernel observation)",
        benefits: [
          "Monitor actual build execution at kernel level",
          "Block unauthorized access in real-time",
          "Enforce which processes can read source code",
          "Generate SBOMs from actual kernel observations"
        ],
        tagline: "One shows intent. The other shows reality. We monitor actual build execution at the kernel level, seeing every file access, every process spawn, every syscall."
      }
    }
  },

  solution: {
    title: "Zero-Trust Build Security with Real Provenance",
    subtitle: "The only solution that protects builds in real-time at the kernel level where attacks actually happen",
    features: [
      {
        title: "Default Deny Architecture",
        description: "Nothing gets through without explicit permission. Zero-trust enforcement at the kernel level blocks unauthorized access before it happens.",
        benefits: [
          "Block unauthorized build access instantly",
          "Default deny with explicit allowlists only",
          "Kernel-enforced directory protection",
          "Zero workflow changes for complex pipelines"
        ]
      },
      {
        title: "Real SBOMs from Real Protection",
        description: "Complete build forensics with SHA256 verification of every file access. Mathematical proof your build wasn't compromised.",
        benefits: [
          "Every file hash calculated in real-time",
          "Process attribution for every access",
          "Tamper-evident Merkle tree proof", 
          "Cryptographic chain of custody"
        ]
      },
      {
        title: "Active Attack Prevention",
        description: "Stop attacks before they succeed. Unlike scanners that detect after damage is done, we prevent unauthorized access at the kernel level.",
        benefits: [
          "Block supply chain attacks during build",
          "Prevent secret exfiltration attempts instantly",
          "Stop compiler hijacking and injection attacks",
          "Complete forensic evidence of blocked attempts"
        ]
      }
    ]
  },

  scenarios: {
    title: "Real Attack Scenarios We Stop",
    subtitle: "See how Bomfather prevents build attacks that traditional security completely misses",
    cases: [
      {
        title: "The Typosquatter Attack",
        attack: "Malicious package in dependencies runs post-install script to steal AWS keys and source code.",
        traditional: "Include both packages in SBOM. Attack succeeds, credentials stolen.",
        bomfather: "Post-install blocked from reading /src/config. Attack prevented, evidence logged."
      },
      {
        title: "The CI/CD Injection",
        attack: "Attacker modifies GitHub Action to download and execute malicious script during build.",
        traditional: "No protection during build execution. Secrets exfiltrated successfully.",
        bomfather: "Bash script blocked from accessing /home directory. Build fails safely with full forensics."
      },
      {
        title: "The Compiler Hijack",
        attack: "Attacker replaces legitimate compiler with wrapper that steals source code.",
        traditional: "Build succeeds with compromised compiler. Source code leaked.",
        bomfather: "Hijacked compiler blocked from reading unauthorized files. Tampering detected instantly."
      },
      {
        title: "The Insider Threat",
        attack: "Malicious developer adds script to zip and upload source code to external S3 bucket.",
        traditional: "Legitimate AWS CLI usage appears normal. Source code successfully stolen.",
        bomfather: "Zip command blocked from accessing /src directory. Developer's backdoor neutralized."
      }
    ]
  }
};
---

<BaseLayout 
  title="Protect Builds - Zero-Trust Build Security | Bomfather"
  description="Stop build attacks in real-time with kernel-level protection. Default deny security, cryptographic SBOMs, and complete build forensics."
  showAnnouncement={false}
  showNewsletter={false}
>
  <!-- Hero Section -->
  <Hero 
    title={pageContent.hero.title}
    subtitle={pageContent.hero.subtitle}
    primaryCTA={pageContent.hero.primaryCTA}
    secondaryCTA={pageContent.hero.secondaryCTA}
    metrics={pageContent.hero.metrics}
  />

  <!-- SBOM Reality Check Section -->
  <PageSection 
    id="sbom-reality-check"
    variant="dark"
    size="lg"
    title={pageContent.attackVectors.build.header}
    subtitle={pageContent.attackVectors.build.headerDescription}
    headerLevel={2}
    centerHeader={true}
    className="attack-vectors-section"
  >
    <div class="attack-vector-cards">
      <div class="attack-vector-card">
        <h4 class="attack-card-title">{pageContent.attackVectors.build.traditional.title}</h4>
        <p class="attack-card-description">{pageContent.attackVectors.build.traditional.description}</p>
        <ul class="attack-problems-list">
          {pageContent.attackVectors.build.traditional.problems.map((problem) => (
            <li class="problem-item">{problem}</li>
          ))}
        </ul>
      </div>
      
      <div class="attack-vector-card">
        <h4 class="attack-card-title">{pageContent.attackVectors.build.bomfather.title}</h4>
        <ul class="attack-benefits-list">
          {pageContent.attackVectors.build.bomfather.benefits.map((benefit) => (
            <li class="benefit-item">{benefit}</li>
          ))}
        </ul>
        <p class="attack-card-tagline">{pageContent.attackVectors.build.bomfather.tagline}</p>
      </div>
    </div>
  </PageSection>

  <!-- Solution Section -->
  <PageSection 
    id="solution"
    variant="dark"
    size="lg"
    title={pageContent.solution.title}
    subtitle={pageContent.solution.subtitle}
    headerLevel={2}
    centerHeader={true}
    className="features-section"
  >
    <div class="features-grid animate-stagger">
      {pageContent.solution.features.map((feature, index) => (
        <Card 
          variant="glass"
          padding="lg"
          className="feature-card animate-slide-up"
          style={`--delay: ${index * 0.2}s`}
        >
          <h3 class="feature-title">{feature.title}</h3>
          <p class="feature-description">{feature.description}</p>
          <ul class="benefits-list">
            {feature.benefits.map((benefit, bIndex) => (
              <li class="animate-fade-in" style={`--delay: ${0.1 + bIndex * 0.1}s`}>
                {benefit}
              </li>
            ))}
          </ul>
        </Card>
      ))}
    </div>
  </PageSection>

  <!-- Attack Scenarios Section -->
  <PageSection 
    id="scenarios"
    variant="dark"
    size="lg"
    title={pageContent.scenarios.title}
    subtitle={pageContent.scenarios.subtitle}
    headerLevel={2}
    centerHeader={true}
    className="scenarios-section"
  >
    <div class="scenarios-grid animate-stagger">
      {pageContent.scenarios.cases.map((scenario, index) => (
        <Card 
          variant="glass"
          padding="lg"
          className="scenario-card animate-slide-up"
          style={`--delay: ${index * 0.2}s`}
        >
          <h3 class="scenario-title">{scenario.title}</h3>
          
          <div class="scenario-section">
            <h4 class="scenario-label">The Attack:</h4>
            <p class="scenario-text attack-text">{scenario.attack}</p>
          </div>
          
          <div class="scenario-section">
            <h4 class="scenario-label traditional-label">Traditional Security:</h4>
            <p class="scenario-text traditional-text">✗ {scenario.traditional}</p>
          </div>
          
          <div class="scenario-section">
            <h4 class="scenario-label bomfather-label">Bomfather:</h4>
            <p class="scenario-text bomfather-text">✓ {scenario.bomfather}</p>
          </div>
        </Card>
      ))}
    </div>
  </PageSection>
</BaseLayout>

<style>
/* Professional Theme Base - matching AI security page */
:root {
  --bg-primary: var(--color-background);
  --bg-secondary: var(--color-background);
  --bg-tertiary: #FFFFFF;
  --text-primary: var(--color-text-primary);
  --text-secondary: var(--color-text-secondary);
  --text-tertiary: var(--color-text-tertiary);
  --accent-primary: var(--color-primary);
  --accent-secondary: #3b82f6;
  --accent-gradient: linear-gradient(135deg, var(--color-primary) 0%, #1d4ed8 100%);
  --border-color: var(--color-border-light);
  --glass-bg: #FFFFFF;
  --shadow-professional: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --success-color: #16a34a;
  --error-color: #dc2626;
  
  /* Professional spacing */
  --spacing-xs: 0.5rem;
  --spacing-sm: 0.75rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  --spacing-2xl: 3rem;
}

/* Professional Global Styles - matching AI security page */
* {
  box-sizing: border-box;
}

body {
  background: var(--bg-primary) !important;
  color: var(--text-secondary);
  font-family: 'Fira Code', 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', monospace;
  line-height: 1.6;
  font-size: 14px;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Keep Inter for hero titles and main headings */
.hero-title,
.hero-subtitle,
.page-section h1,
.page-section h2,
.page-section h3,
.section-title,
.attack-card-title,
.feature-title,
.scenario-title {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
}

/* Background gradients */
.bg-gradient-dark {
  background: var(--bg-primary);
  position: relative;
}

.bg-gradient-dark::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: var(--bg-primary);
  pointer-events: none;
}

/* Animation Keyframes */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideUp {
  from { opacity: 0; transform: translateY(30px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes scaleIn {
  from { opacity: 0; transform: scale(0.8); }
  to { opacity: 1; transform: scale(1); }
}

@keyframes glow {
  0%, 100% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.1); }
  50% { box-shadow: 0 0 40px rgba(59, 130, 246, 0.3); }
}

@keyframes bounceX {
  0%, 100% { transform: translateX(0); }
  50% { transform: translateX(5px); }
}

/* Animation Classes */
.animate-fade-in {
  opacity: 0;
  animation: fadeIn 0.6s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-slide-up {
  opacity: 0;
  animation: slideUp 0.8s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-scale {
  opacity: 0;
  animation: scaleIn 0.6s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-stagger > * {
  opacity: 0;
  animation: fadeIn 0.6s ease-out forwards;
  animation-delay: calc(var(--delay, 0s) + var(--stagger-delay, 0s));
}

.animate-on-scroll {
  opacity: 0;
  transform: translateY(30px);
  transition: all 0.8s ease-out;
}

.animate-on-scroll.in-view {
  opacity: 1;
  transform: translateY(0);
}

/* Hover Animations */
.hover-lift {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Removed hover effect for non-clickable elements */

.hover-glow {
  transition: all 0.3s ease;
}

.hover-glow:hover {
  box-shadow: 0 0 40px rgba(59, 130, 246, 0.15);
  border-color: var(--accent-secondary);
}

/* Attack Vectors Section - simplified */

.attack-vector-cards {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

.attack-vector-card {
  background: transparent;
  border: none;
  border-radius: 0;
  padding: var(--spacing-xl);
  /* Offset tile shadow (solid rectangle) */
  position: relative;
  isolation: isolate;
  display: flex;
  flex-direction: column;
  transition: none;
}

/* Paint the main card surface so the offset tile does not bleed through */
.attack-vector-card::before {
  content: '';
  position: absolute;
  inset: 0;
  background: var(--glass-bg);
  border-radius: inherit;
  z-index: -1;
  pointer-events: none;
}

/* Solid offset tile behind each attack vector column */
.attack-vector-card::after {
  content: '';
  position: absolute;
  inset: 0;
  transform: translate(10px, 10px);
  background: rgba(100, 116, 139, 0.12);
  z-index: -2;
  border-radius: inherit;
  pointer-events: none;
}

/* Standalone boxes: each column has its own border */
.attack-vector-card {
  border: 1px solid var(--color-border-strong);
}

.attack-card-title {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: var(--spacing-md);
  color: var(--text-primary) !important;
  letter-spacing: -0.025em;
  line-height: 1.4;
}

.attack-card-description {
  color: var(--text-secondary);
  line-height: 1.6;
  margin-bottom: var(--spacing-lg);
  font-size: 0.875rem;
}

.attack-problems-list,
.attack-benefits-list {
  list-style: none;
  padding: 0;
  margin: 0 0 1.5rem 0;
  flex: 1;
}

.problem-item,
.benefit-item {
  padding: var(--spacing-sm) 0;
  color: var(--text-secondary);
  line-height: 1.5;
  font-size: 0.875rem;
  border-bottom: 1px solid #f3f4f6;
  display: flex;
  align-items: flex-start;
  gap: var(--spacing-sm);
}

.problem-item:last-child,
.benefit-item:last-child {
  border-bottom: none;
}

.problem-item::before {
  content: '✗';
  color: #ef4444;
  font-weight: 600;
  margin-top: 1px;
}

.benefit-item::before {
  content: '✓';
  color: #10b981;
  font-weight: 600;
  margin-top: 1px;
}

.attack-card-tagline {
  font-style: italic;
  color: var(--text-tertiary);
  font-size: 0.875rem;
  line-height: 1.5;
  margin-top: auto;
  padding-top: 1rem;
  border-top: 1px solid var(--border-color);
}

/* Features Grid - 3 cards in a single row */
.features-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1.5rem;
  position: relative;
  z-index: 2;
  max-width: 1400px;
  margin: 0 auto;
}

/* Remove boxy card visuals; use grid dividers instead */
.features-grid :global(.card--glass) {
  background: transparent;
  border: 1px solid var(--color-border-strong);
  box-shadow: none;
}

.features-grid :global(.card) {
  border-radius: 0;
  padding: var(--spacing-xl);
  /* Offset tile shadow */
  position: relative;
  isolation: isolate;
}

/* Paint the main card surface */
.features-grid :global(.card)::before {
  content: '';
  position: absolute;
  inset: 0;
  background: var(--glass-bg);
  border-radius: inherit;
  z-index: -1;
  pointer-events: none;
}

/* Solid offset tile behind each feature card */
.features-grid :global(.card)::after {
  content: '';
  position: absolute;
  inset: 0;
  transform: translate(10px, 10px);
  background: rgba(100, 116, 139, 0.12);
  z-index: -2;
  border-radius: inherit;
  pointer-events: none;
}

/* Remove connected grid dividers; use standalone boxes with gap */

.feature-title {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: var(--text-primary) !important;
}

.feature-description {
  color: var(--text-secondary);
  line-height: 1.6;
  margin-bottom: 1.5rem;
  flex-grow: 1;
}

.benefits-list {
  margin-top: 1.5rem;
  padding-left: 0;
  list-style: none;
}

.benefits-list li {
  position: relative;
  padding-left: 2rem;
  margin-bottom: 0.75rem;
  color: var(--text-secondary);
  line-height: 1.5;
}

.benefits-list li::before {
  content: '✓';
  position: absolute;
  left: 0;
  color: var(--accent-primary);
  font-weight: bold;
  font-size: 1.1rem;
}

/* Scenarios Grid */
.scenarios-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1.5rem;
  max-width: 1200px;
  margin: 0 auto;
}

/* Scenarios outlined boxes */
.scenarios-grid :global(.card--glass) {
  background: transparent;
  border: 1px solid var(--color-border-strong);
  box-shadow: none;
}

.scenarios-grid :global(.card) {
  border-radius: 0;
  padding: var(--spacing-xl);
  height: 100%;
  display: flex;
  flex-direction: column;
  /* Offset tile shadow */
  position: relative;
  isolation: isolate;
}

/* Solid offset tile behind each scenario card */
.scenarios-grid :global(.card)::before {
  content: '';
  position: absolute;
  inset: 0;
  background: var(--glass-bg);
  border-radius: inherit;
  z-index: -1;
  pointer-events: none;
}
.scenarios-grid :global(.card)::after {
  content: '';
  position: absolute;
  inset: 0;
  transform: translate(10px, 10px);
  background: rgba(100, 116, 139, 0.12);
  z-index: -2;
  border-radius: inherit;
  pointer-events: none;
}

/* No extra grid dividers; each scenario is a full outlined box */

.scenario-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: var(--text-primary) !important;
}

.scenario-section {
  margin-bottom: 1.5rem;
}

.scenario-section:last-child {
  margin-bottom: 0;
}

.scenario-label {
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin-bottom: 0.5rem;
  color: #a1a1aa;
}

.traditional-label {
  color: var(--error-color);
}

.bomfather-label {
  color: var(--success-color);
}

.scenario-text {
  font-size: 0.9rem;
  line-height: 1.7;
  margin: 0;
}

.attack-text { color: var(--text-secondary); }

.traditional-text {
  color: var(--error-color);
}

.bomfather-text {
  color: var(--success-color);
}

/* Card title and text improvements - matching AI security page */
.card h1, .card h2, .card h3, .card h4, .card h5, .card h6,
.card .title, .card .card-title, .card .heading,
.feature-card h1, .feature-card h2, .feature-card h3, .feature-card h4, .feature-card h5, .feature-card h6 {
  color: var(--text-primary) !important;
}

.card-title {
  color: var(--text-primary) !important;
}

.card-content {
  color: var(--text-secondary) !important;
  margin-bottom: 2rem !important;
}

/* Responsive Design - matching AI security page */
@media (max-width: 1200px) {
  .features-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
    padding: 0 1rem;
  }
}

@media (max-width: 1024px) {
  .scenarios-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
}

@media (max-width: 768px) {
  .attack-vector-cards {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .attack-vector-card {
    min-height: auto;
    border: 1px solid var(--color-border-strong);
  }
  /* Standalone boxes on mobile; no connector borders */
  
  .features-grid,
  .scenarios-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .scenarios-grid {
    padding: 0 1rem;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
  
  .animate-bounce-x {
    animation: none;
  }
}
</style>

<script>
// Intersection Observer for scroll animations - matching AI security page
const observerOptions = {
  threshold: 0.1,
  rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      entry.target.classList.add('in-view');
    }
  });
}, observerOptions);

// Initialize animations when DOM loads
document.addEventListener('DOMContentLoaded', () => {
  const scrollElements = document.querySelectorAll('.animate-on-scroll');
  scrollElements.forEach(el => observer.observe(el));
  
  // Initialize typing animations
  initTypingAnimations();
  
  // Add stagger delays for grid items
  const staggerContainers = document.querySelectorAll('.animate-stagger');
  
  staggerContainers.forEach(container => {
    const items = container.children;
    Array.from(items).forEach((item, index) => {
      item.style.setProperty('--stagger-delay', `${index * 0.1}s`);
    });
  });
});

// Typing animation for code blocks
function initTypingAnimations() {
  const codeBlocks = document.querySelectorAll('.animate-typing');
  
  codeBlocks.forEach((block, index) => {
    const code = block.dataset.code;
    const codeElement = block.querySelector('code');
    
    if (code && codeElement) {
      // Calculate fixed height based on number of lines
      const lines = code.split('\n');
      const lineCount = lines.length;
      const lineHeight = 1.6; // rem
      const fontSize = 0.875; // rem  
      const paddingTop = 1.5; // rem
      const paddingBottom = 1.5; // rem
      
      // Calculate height in pixels (16px = 1rem)
      const contentHeight = lineCount * lineHeight * fontSize * 16;
      const totalPadding = (paddingTop + paddingBottom) * 16;
      const fixedHeight = contentHeight + totalPadding;
      
      // Set fixed height immediately to prevent expansion
      block.style.height = `${fixedHeight}px`;
      block.style.maxHeight = `${fixedHeight}px`;
      block.style.minHeight = `${fixedHeight}px`;
      
      // Ensure code element also has constraints
      const codeContentHeight = lineCount * lineHeight * fontSize * 16;
      codeElement.style.height = `${codeContentHeight}px`;
      codeElement.style.maxHeight = `${codeContentHeight}px`;
      
      let i = 0;
      const speed = 20;
      
      function typeWriter() {
        if (i < code.length) {
          codeElement.textContent += code.charAt(i);
          i++;
          setTimeout(typeWriter, speed);
        }
      }
      
      // Start typing animation when in view
      const blockObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && codeElement.textContent === '') {
            setTimeout(typeWriter, 200);
          }
        });
      }, observerOptions);
      
      blockObserver.observe(block);
    }
  });
}
</script> 