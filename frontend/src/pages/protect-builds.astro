---
import BaseLayout from '../layouts/BaseLayout.astro';
import Hero from '../components/sections/Hero.astro';
import PageSection from '../components/ui/PageSection.astro';
import Card from '../components/ui/Card.astro';

const pageContent = {
  hero: {
    title: "Build Protection That Prevents, Not Just Detects",
    subtitle: "Traditional tools scan your manifest files. But they have no idea what actually happened during your build. By the time your code ships, the damage is already done.",
    metrics: [
    ]
  },
  problem: {
    title: "The SBOM Reality Check: Intent vs. Reality",
    sections: [
      {
        title: "Traditional SBOM (from manifests)",
        description: "Traditional tools scan your package.json, go.mod, requirements.txt. But they can't see the post-install script that exfiltrated your AWS keys, the compiler that was hijacked to inject backdoors, or the build tool that copied your source to an S3 bucket.",
        code: `{
  "dependencies": {
    "express": "4.18.0",     // ‚úì This is declared
    "lodash": "4.17.21"      // ‚úì This is declared
    // ‚úó No idea what express's postinstall script did
    // ‚úó No idea what files the build accessed
    // ‚úó No idea if your compiler was hijacked
  }
}`,
        problems: [
          "Completely blind to build execution",
          "Trust that nothing malicious runs in post-install scripts", 
          "Generate SBOMs from manifest files only",
          "Miss everything that actually matters during build time"
        ]
      },
      {
        title: "Bomfather SBOM (from kernel observation)",
        description: "We monitor actual build execution at the kernel level, seeing every file access, every process spawn, every syscall. One shows intent. The other shows reality.",
        code: `{
  "actual_runtime_behavior": {
    "express_postinstall": {
      "attempted": "cat /home/.aws/credentials",
      "result": "BLOCKED by policy"
    },
    "files_accessed": [
      {
        "path": "/src/main.js",
        "sha256": "a1b2c3d4...",
        "accessed_by": "node (PID: 1234)",
        "permission": "allowed"
      }
    ],
    "blocked_attempts": 3,
    "merkle_root": "proof_of_entire_build"
  }
}`,
        problems: [
          "Monitor actual build execution at kernel level",
          "Block unauthorized access in real-time",
          "Enforce which processes can read source code",
          "Generate SBOMs from actual kernel observations"
        ]
      }
    ]
  },
  solution: {
    title: "Zero-Trust Build Security with Real Provenance",
    subtitle: "The only solution that protects builds in real-time at the kernel level where attacks actually happen",
    features: [
      {
        title: "üö´ Default Deny Architecture",
        description: "Nothing gets through without explicit permission. Zero-trust enforcement at the kernel level blocks unauthorized access before it happens.",
        benefits: [
          "Block unauthorized build access instantly",
          "Default deny with explicit allowlists only",
          "Kernel-enforced directory protection",
          "Zero workflow changes for complex pipelines"
        ]
      },
      {
        title: "üß¨ Intelligent Process Inheritance", 
        description: "Complex build chains just work. Trusted processes automatically pass permissions to legitimate children‚Äîattackers can't fake lineage.",
        benefits: [
          "Same file runs or gets blocked based on parent process",
          "Injected processes can't fake their ancestry",
          "No allowlist maintenance for build tools",
          "Kernel-enforced lineage tracking"
        ]
      },
      {
        title: "üìä Real SBOMs from Real Protection",
        description: "Complete build forensics with SHA256 verification of every file access. Mathematical proof your build wasn't compromised.",
        benefits: [
          "Every file hash calculated in real-time",
          "Process attribution for every access",
          "Tamper-evident Merkle tree proof", 
          "Cryptographic chain of custody"
        ]
      },
      {
        title: "‚öîÔ∏è Active Attack Prevention",
        description: "Stop attacks before they succeed. Unlike scanners that detect after damage is done, we prevent unauthorized access at the kernel level.",
        benefits: [
          "Block supply chain attacks during build",
          "Prevent secret exfiltration attempts instantly",
          "Stop compiler hijacking and injection attacks",
          "Complete forensic evidence of blocked attempts"
        ]
      }
    ]
  },

  scenarios: {
    title: "Real Attack Scenarios We Stop",
    subtitle: "See how Bomfather prevents build attacks that traditional security completely misses",
    cases: [
      {
        title: "The Typosquatter Attack",
        attack: "Malicious package in dependencies runs post-install script to steal AWS keys and source code.",
        traditional: "Include both packages in SBOM. Attack succeeds, credentials stolen.",
        bomfather: "Post-install blocked from reading /src/config. Attack prevented, evidence logged."
      },
      {
        title: "The CI/CD Injection",
        attack: "Attacker modifies GitHub Action to download and execute malicious script during build.",
        traditional: "No protection during build execution. Secrets exfiltrated successfully.",
        bomfather: "Bash script blocked from accessing /home directory. Build fails safely with full forensics."
      },
      {
        title: "The Compiler Hijack",
        attack: "Attacker replaces legitimate compiler with wrapper that steals source code.",
        traditional: "Build succeeds with compromised compiler. Source code leaked.",
        bomfather: "Hijacked compiler blocked from reading unauthorized files. Tampering detected instantly."
      },
      {
        title: "The Insider Threat",
        attack: "Malicious developer adds script to zip and upload source code to external S3 bucket.",
        traditional: "Legitimate AWS CLI usage appears normal. Source code successfully stolen.",
        bomfather: "Zip command blocked from accessing /src directory. Developer's backdoor neutralized."
      }
    ]
  },

  getStarted: {
    title: "Ready to Secure Your Builds?",
    subtitle: "Your build pipeline is exposed to attacks right now. Deploy zero-trust build security in minutes.",
    options: [
      {
        title: "Contact Us",
        description: "Get in touch to learn how Bomfather can secure your build pipeline from supply chain attacks.",
        type: "primary",
        cta: {
          text: "Contact Us",
          href: "https://bomfather.dev/contact"
        }
      }
    ]
  }
};
---

<BaseLayout 
  title="Protect Builds - Zero-Trust Build Security | Bomfather"
  description="Stop build attacks in real-time with kernel-level protection. Default deny security, cryptographic SBOMs, and complete build forensics."
  showAnnouncement={false}
>
  <!-- Hero Section -->
  <Hero 
    title={pageContent.hero.title}
    subtitle={pageContent.hero.subtitle}
    metrics={pageContent.hero.metrics}
  />

  <!-- Problem Section -->
  <PageSection 
    id="problem"
    variant="dark"
    size="lg"
    title={pageContent.problem.title}
    centerHeader={true}
    className="bg-gradient-dark problem-section"
  >
    <div class="problems-container animate-stagger">
      {pageContent.problem.sections.map((section, index) => (
        <div class="problem-block animate-on-scroll" style={`--delay: ${index * 0.3}s`}>
          <div class="problem-header">
            <h3 class="problem-title animate-slide-up">{section.title}</h3>
            <p class="problem-description animate-fade-in" style="--delay: 0.1s" set:html={section.description}></p>
          </div>
          
          <div class="problem-content">
            {section.code && (
              <pre class="code-block static-code"><code class="language-json" id={`problem-code-${index}`}>{section.code}</code></pre>
            )}
            
            <div class="problem-list-section">
              <ul class={`problem-list ${index === 0 ? 'traditional-list' : 'bomfather-list'}`}>
                {section.problems.map((problem, pIndex) => (
                  <li class="problem-item animate-fade-in" style={`--delay: ${0.2 + pIndex * 0.1}s`}>
                    {index === 0 ? '‚úó' : '‚úì'} {problem}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      ))}
    </div>
  </PageSection>

  <!-- Solution Section -->
  <PageSection 
    id="solution"
    variant="dark"
    size="lg"
    title={pageContent.solution.title}
    subtitle={pageContent.solution.subtitle}
    centerHeader={true}
  >
    <div class="solution-grid animate-stagger">
      {pageContent.solution.features.map((feature, index) => (
        <Card 
          variant="glass"
          padding="lg"
          className="solution-card animate-slide-up hover-lift"
          style={`--delay: ${index * 0.2}s`}
        >
          <h3 class="solution-card-title">{feature.title}</h3>
          <p class="solution-card-description">{feature.description}</p>
          <ul class="solution-benefits-list">
            {feature.benefits.map((benefit, bIndex) => (
              <li class="benefit-item animate-fade-in" style={`--delay: ${0.1 + bIndex * 0.1}s`}>
                ‚úì {benefit}
              </li>
            ))}
          </ul>
        </Card>
      ))}
    </div>
  </PageSection>

  <!-- Attack Scenarios Section -->
  <PageSection 
    id="scenarios"
    variant="dark"
    size="lg"
    title={pageContent.scenarios.title}
    subtitle={pageContent.scenarios.subtitle}
    centerHeader={true}
    className="scenarios-section"
  >
    <div class="scenarios-grid animate-stagger">
      {pageContent.scenarios.cases.map((scenario, index) => (
        <Card 
          variant="glass"
          padding="lg"
          className="scenario-card animate-slide-up hover-lift"
          style={`--delay: ${index * 0.2}s`}
        >
          <h3 class="scenario-title">{scenario.title}</h3>
          
          <div class="scenario-section">
            <h4 class="scenario-label">The Attack:</h4>
            <p class="scenario-text attack-text">{scenario.attack}</p>
          </div>
          
          <div class="scenario-section">
            <h4 class="scenario-label traditional-label">Traditional Security:</h4>
            <p class="scenario-text traditional-text">‚úó {scenario.traditional}</p>
          </div>
          
          <div class="scenario-section">
            <h4 class="scenario-label bomfather-label">Bomfather:</h4>
            <p class="scenario-text bomfather-text">‚úì {scenario.bomfather}</p>
          </div>
        </Card>
      ))}
    </div>
  </PageSection>



  <!-- What You Get Section -->
  <PageSection 
    id="what-you-get"
    variant="dark"
    size="lg"
    title="What You Get"
    subtitle="Real value for every team involved in your software delivery pipeline"
    centerHeader={true}
  >
    <div class="teams-grid animate-stagger">
      <Card 
        variant="glass"
        padding="lg"
        className="team-card animate-slide-up hover-lift"
        style="--delay: 0s"
      >
        <h3 class="team-title">For Security Teams</h3>
        <ul class="team-benefits-list">
          <li class="team-benefit-item">
            <strong>Active attack prevention</strong> - Not just detection after the fact
          </li>
          <li class="team-benefit-item">
            <strong>Zero-trust build isolation</strong> - Default deny with explicit allowlists
          </li>
          <li class="team-benefit-item">
            <strong>Real-time threat blocking</strong> - Kernel stops unauthorized access instantly
          </li>
          <li class="team-benefit-item">
            <strong>Complete forensic evidence</strong> - Every allowed AND blocked action logged
          </li>
          <li class="team-benefit-item">
            <strong>Regulatory compliance</strong> - Prove builds are protected, not just monitored
          </li>
          <li class="team-benefit-item">
            <strong>Supply chain defense</strong> - Stop attacks at the source
          </li>
        </ul>
      </Card>

      <Card 
        variant="glass"
        padding="lg"
        className="team-card animate-slide-up hover-lift"
        style="--delay: 0.2s"
      >
        <h3 class="team-title">For DevOps Teams</h3>
        <ul class="team-benefits-list">
          <li class="team-benefit-item">
            <strong>No pipeline rewrites</strong> - Add one command, get full protection
          </li>
          <li class="team-benefit-item">
            <strong>Invisible to good builds</strong> - Legitimate processes just work
          </li>
          <li class="team-benefit-item">
            <strong>Less than 0.1% overhead</strong> - eBPF efficiency at kernel level
          </li>
          <li class="team-benefit-item">
            <strong>Process inheritance</strong> - Complex build chains handled automatically
          </li>
          <li class="team-benefit-item">
            <strong>Local/CI parity</strong> - Same protection everywhere
          </li>
          <li class="team-benefit-item">
            <strong>Instant feedback</strong> - Know immediately what would be blocked
          </li>
        </ul>
      </Card>

      <Card 
        variant="glass"
        padding="lg"
        className="team-card animate-slide-up hover-lift"
        style="--delay: 0.4s"
      >
        <h3 class="team-title">For Compliance & Audit</h3>
        <ul class="team-benefits-list">
          <li class="team-benefit-item">
            <strong>Mathematical proof</strong> - SHA256 + Merkle trees = unforgeable evidence
          </li>
          <li class="team-benefit-item">
            <strong>Policy enforcement logs</strong> - Show what you protected against
          </li>
          <li class="team-benefit-item">
            <strong>Complete attribution</strong> - Every file access linked to process/user
          </li>
          <li class="team-benefit-item">
            <strong>Tamper-evident records</strong> - Kernel-level capture can't be faked
          </li>
          <li class="team-benefit-item">
            <strong>Reproducible builds</strong> - Same protection = same results
          </li>
        </ul>
      </Card>
    </div>
  </PageSection>

  <!-- Get Started Section -->
  <PageSection 
    id="get-started"
    variant="dark"
    size="lg"
    title={pageContent.getStarted.title}
    subtitle={pageContent.getStarted.subtitle}
    centerHeader={true}
    className="bg-gradient-dark"
  >
    <div class="get-started-options animate-stagger">
      {pageContent.getStarted.options.map((option, index) => (
        <Card 
          variant="glass"
          padding="lg"
          href={option.cta.href}
          clickable={true}
          className="get-started-card hover-glow"
          style={`--delay: ${index * 0.2}s`}
        >
          <h3 class="animate-slide-up">{option.title}</h3>
          <p class="animate-fade-in" style="--delay: 0.1s">{option.description}</p>
          <div slot="footer">
            <span class={`cta-button cta-button--${option.type} animate-slide-up`} style="--delay: 0.2s">
              {option.cta.text} <span class="arrow animate-bounce-x">‚Üí</span>
            </span>
          </div>
        </Card>
      ))}
    </div>
  </PageSection>
</BaseLayout>

<style>
/* Import base styles from protect-ai page */
:root {
  --bg-primary: #0a0d15;
  --bg-secondary: #0a0d15;
  --bg-tertiary: #0a0d15;
  --text-primary: #ffffff;
  --text-secondary: #a1a1aa;
  --text-tertiary: #71717a;
  --accent-primary: #3b82f6;
  --accent-secondary: #60a5fa;
  --accent-gradient: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  --border-color: rgba(255, 255, 255, 0.1);
  --glass-bg: rgba(255, 255, 255, 0.05);
  --shadow-glow: 0 0 40px rgba(59, 130, 246, 0.15);
  --success-color: #86efac;
  --error-color: #fca5a5;
  --warning-color: #fbbf24;
}

/* Global dark theme */
* {
  box-sizing: border-box;
}

body {
  background: #0a0d15 !important;
  color: var(--text-primary);
}

.bg-gradient-dark {
  background: #0a0d15;
  position: relative;
}

/* Animation Keyframes */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideUp {
  from { opacity: 0; transform: translateY(30px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes scaleIn {
  from { opacity: 0; transform: scale(0.8); }
  to { opacity: 1; transform: scale(1); }
}

@keyframes glow {
  0%, 100% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.1); }
  50% { box-shadow: 0 0 40px rgba(59, 130, 246, 0.3); }
}

@keyframes bounceX {
  0%, 100% { transform: translateX(0); }
  50% { transform: translateX(5px); }
}

/* Animation Classes */
.animate-fade-in {
  opacity: 0;
  animation: fadeIn 0.6s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-slide-up {
  opacity: 0;
  animation: slideUp 0.8s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-scale {
  opacity: 0;
  animation: scaleIn 0.6s ease-out forwards;
  animation-delay: var(--delay, 0s);
}

.animate-stagger > * {
  opacity: 0;
  animation: fadeIn 0.6s ease-out forwards;
  animation-delay: calc(var(--delay, 0s) + var(--stagger-delay, 0s));
}

.animate-on-scroll {
  opacity: 0;
  transform: translateY(30px);
  transition: all 0.8s ease-out;
}

.animate-on-scroll.in-view {
  opacity: 1;
  transform: translateY(0);
}

/* Hover Animations */
.hover-lift {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.hover-lift:hover {
  transform: translateY(-8px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.hover-glow {
  transition: all 0.3s ease;
}

.hover-glow:hover {
  box-shadow: var(--shadow-glow);
  border-color: var(--accent-secondary);
}

/* Problem Section */
.problems-container {
  display: flex;
  flex-direction: column;
  gap: 6rem;
  max-width: 1000px;
  margin: 0 auto;
}

.problem-block {
  text-align: center;
}

.problem-header {
  margin-bottom: 3rem;
}

.problem-title {
  font-size: 2rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: #ffffff;
}

.problem-description {
  color: #d1d5db;
  font-size: 1.125rem;
  line-height: 1.7;
  max-width: 800px;
  margin: 0 auto;
}

.problem-content {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  align-items: center;
  max-width: 900px;
  margin: 0 auto;
}

.code-block {
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
  background: rgba(0, 0, 0, 0.4);
  border: 1px solid var(--border-color);
  border-radius: 0.75rem;
  padding: 1.5rem;
  font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  position: relative;
  overflow: hidden;
}

.code-block::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: var(--accent-gradient);
  border-radius: 0.75rem 0.75rem 0 0;
}

.code-block code {
  color: #e5e7eb;
  font-size: 0.875rem;
  line-height: 1.6;
  display: block;
  white-space: pre;
  height: 100%;
  overflow: hidden;
}

.static-code {
  text-align: left;
}

.static-code code {
  height: auto;
  white-space: pre-wrap;
}

.problem-list-section {
  width: 100%;
}

.problem-list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1rem;
}

.traditional-list .problem-item {
  padding: 1rem 1.5rem;
  background: rgba(239, 68, 68, 0.05);
  border: 1px solid rgba(239, 68, 68, 0.2);
  border-radius: 0.5rem;
  color: #fca5a5;
  font-size: 0.875rem;
  line-height: 1.5;
  text-align: left;
  transition: all 0.3s ease;
}

.traditional-list .problem-item:hover {
  background: rgba(239, 68, 68, 0.1);
  border-color: rgba(239, 68, 68, 0.3);
  transform: translateY(-2px);
}

.bomfather-list .problem-item {
  padding: 1rem 1.5rem;
  background: rgba(34, 197, 94, 0.05);
  border: 1px solid rgba(34, 197, 94, 0.2);
  border-radius: 0.5rem;
  color: var(--success-color);
  font-size: 0.875rem;
  line-height: 1.5;
  text-align: left;
  transition: all 0.3s ease;
}

.bomfather-list .problem-item:hover {
  background: rgba(34, 197, 94, 0.1);
  border-color: rgba(34, 197, 94, 0.3);
  transform: translateY(-2px);
}

/* Solution Grid */
.solution-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
  gap: 2rem;
}

.solution-card {
  border: 1px solid var(--border-color);
  height: 100%;
  display: flex;
  flex-direction: column;
}

.solution-card-title {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: #ffffff !important;
}

.solution-card-description {
  color: #d1d5db;
  line-height: 1.6;
  margin-bottom: 1.5rem;
  flex-grow: 1;
}

.solution-benefits-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.benefit-item {
  padding: 0.5rem 0;
  color: var(--success-color);
  line-height: 1.5;
  border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.benefit-item:last-child {
  border-bottom: none;
}

/* Steps Container */
.steps-container {
  display: flex;
  flex-direction: column;
  gap: 4rem;
  max-width: 900px;
  margin: 0 auto;
}

.step-item {
  display: grid;
  grid-template-columns: auto 1fr;
  gap: 3rem;
  align-items: start;
}

.step-number {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 4rem;
  height: 4rem;
  flex-shrink: 0;
}

.step-number-bg {
  position: absolute;
  width: 100%;
  height: 100%;
  background: var(--accent-gradient);
  border-radius: 50%;
  animation: glow 3s ease-in-out infinite;
}

.step-number-text {
  position: relative;
  z-index: 1;
  color: white;
  font-weight: 700;
  font-size: 1.5rem;
}

.step-title {
  font-size: 1.75rem;
  font-weight: 600;
  margin-bottom: 1rem;
  color: #ffffff;
}

.step-description {
  color: #d1d5db;
  margin-bottom: 1.5rem;
  line-height: 1.7;
  font-size: 1.125rem;
}



/* Scenarios Grid */
.scenarios-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1.5rem;
  max-width: 1400px;
  margin: 0 auto;
}

.scenario-card {
  border: 1px solid var(--border-color);
  height: 100%;
  display: flex;
  flex-direction: column;
}

.scenario-title {
  font-size: 1.25rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: #ffffff !important;
}

.scenario-section {
  margin-bottom: 1.5rem;
}

.scenario-section:last-child {
  margin-bottom: 0;
}

.scenario-label {
  font-size: 0.875rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin-bottom: 0.5rem;
  color: #a1a1aa;
}

.traditional-label {
  color: var(--error-color);
}

.bomfather-label {
  color: var(--success-color);
}

.scenario-text {
  font-size: 0.875rem;
  line-height: 1.6;
  margin: 0;
}

.attack-text {
  color: #d1d5db;
}

.traditional-text {
  color: var(--error-color);
}

.bomfather-text {
  color: var(--success-color);
}

/* Comparison Table */
.comparison-table-container {
  max-width: 900px;
  margin: 0 auto;
}

.comparison-table {
  background: var(--glass-bg);
  border: 1px solid var(--border-color);
  border-radius: 1rem;
  overflow: hidden;
  backdrop-filter: blur(10px);
}

.comparison-header {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  background: rgba(59, 130, 246, 0.1);
  border-bottom: 1px solid var(--border-color);
}

.comparison-row {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.comparison-row:last-child {
  border-bottom: none;
}

.comparison-col {
  padding: 1rem;
  font-size: 0.875rem;
  line-height: 1.5;
}

.feature-col {
  font-weight: 600;
  color: #ffffff;
}

.traditional-col {
  color: var(--error-color);
}

.bomfather-col {
  color: var(--success-color);
}

.comparison-header .comparison-col {
  font-weight: 600;
  color: #ffffff;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  font-size: 0.75rem;
}

/* Teams Grid */
.teams-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.team-card {
  border: 1px solid var(--border-color);
  height: 100%;
  display: flex;
  flex-direction: column;
}

.team-title {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  color: #ffffff !important;
  text-align: center;
}

.team-benefits-list {
  list-style: none;
  padding: 0;
  margin: 0;
  flex-grow: 1;
}

.team-benefit-item {
  padding: 0.75rem 0;
  color: #d1d5db;
  line-height: 1.6;
  border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  font-size: 0.875rem;
}

.team-benefit-item:last-child {
  border-bottom: none;
}

.team-benefit-item strong {
  color: #d1d5db;
  font-weight: 600;
}

/* Get Started */
.get-started-options {
  display: flex;
  justify-content: center;
  gap: 2rem;
}

.get-started-options > * {
  max-width: 400px;
  flex: 0 0 auto;
}

.get-started-card {
  border: 1px solid var(--border-color);
  text-align: center;
}

.get-started-card h3 {
  color: #ffffff !important;
  font-size: 1.5rem;
  font-weight: 600;
}

.get-started-card p {
  color: #d1d5db !important;
  line-height: 1.6;
}

.cta-button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.875rem 2rem;
  border-radius: 0.5rem;
  font-weight: 600;
  text-decoration: none;
  transition: all 0.3s ease;
}

.cta-button--primary {
  background: var(--accent-gradient);
  color: white;
  box-shadow: 0 4px 14px rgba(59, 130, 246, 0.3);
}

.cta-button--primary:hover {
  box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
  transform: translateY(-2px);
}

.cta-button--secondary {
  background: transparent;
  color: var(--accent-primary);
  border: 1px solid var(--accent-primary);
}

.cta-button--secondary:hover {
  background: var(--glass-bg);
  border-color: var(--accent-secondary);
}

.arrow {
  transition: transform 0.3s ease;
}

.animate-bounce-x {
  animation: bounceX 2s ease-in-out infinite;
}

/* Responsive Design */
@media (max-width: 768px) {
  .step-item {
    grid-template-columns: 1fr;
    gap: 1rem;
    text-align: center;
  }
  
  .solution-grid,
  .scenarios-grid,
  .get-started-options {
    grid-template-columns: 1fr;
  }
  
  .comparison-header,
  .comparison-row {
    grid-template-columns: 1fr;
  }
  
  .comparison-col {
    padding: 0.75rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .comparison-header .comparison-col {
    background: rgba(59, 130, 246, 0.2);
    font-size: 0.875rem;
  }
  

  
  .problems-container {
    gap: 4rem;
    padding: 0 1rem;
  }
  
  .problem-header {
    margin-bottom: 2rem;
  }
  
  .problem-title {
    font-size: 1.5rem;
  }
  
  .problem-description {
    font-size: 1rem;
  }
  
  .problem-content {
    gap: 1.5rem;
  }
  
  .problem-list {
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }
  
  .problem-item {
    padding: 0.75rem 1rem;
    font-size: 0.8125rem;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
  
  .animate-bounce-x {
    animation: none;
  }
}
</style>

<script>
// Intersection Observer for scroll animations
const observerOptions = {
  threshold: 0.1,
  rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      entry.target.classList.add('in-view');
    }
  });
}, observerOptions);

// Initialize animations when DOM loads
document.addEventListener('DOMContentLoaded', () => {
  const scrollElements = document.querySelectorAll('.animate-on-scroll');
  scrollElements.forEach(el => observer.observe(el));
  
  // Initialize typing animations
  initTypingAnimations();
  
  // Add stagger delays for grid items
  const staggerContainers = document.querySelectorAll('.animate-stagger');
  
  staggerContainers.forEach(container => {
    const items = container.children;
    Array.from(items).forEach((item, index) => {
      item.style.setProperty('--stagger-delay', `${index * 0.1}s`);
    });
  });
});

// Typing animation for code blocks
function initTypingAnimations() {
  const codeBlocks = document.querySelectorAll('.animate-typing:not(.static-code)');
  
  codeBlocks.forEach((block, index) => {
    const code = block.dataset.code;
    const codeElement = block.querySelector('code');
    
    if (code && codeElement) {
      // Calculate fixed height based on number of lines
      const lines = code.split('\n');
      const lineCount = lines.length;
      const lineHeight = 1.6; // rem
      const fontSize = 0.875; // rem  
      const paddingTop = 1.5; // rem
      const paddingBottom = 1.5; // rem
      
      // Calculate height in pixels (16px = 1rem)
      const contentHeight = lineCount * lineHeight * fontSize * 16;
      const totalPadding = (paddingTop + paddingBottom) * 16;
      const fixedHeight = contentHeight + totalPadding;
      
      // Set fixed height immediately to prevent expansion
      block.style.height = `${fixedHeight}px`;
      block.style.maxHeight = `${fixedHeight}px`;
      block.style.minHeight = `${fixedHeight}px`;
      
      // Ensure code element also has constraints
      const codeContentHeight = lineCount * lineHeight * fontSize * 16;
      codeElement.style.height = `${codeContentHeight}px`;
      codeElement.style.maxHeight = `${codeContentHeight}px`;
      
      let i = 0;
      const speed = 20;
      
      function typeWriter() {
        if (i < code.length) {
          codeElement.textContent += code.charAt(i);
          i++;
          setTimeout(typeWriter, speed);
        }
      }
      
      // Start typing animation when in view
      const blockObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && codeElement.textContent === '') {
            setTimeout(typeWriter, 200);
          }
        });
      }, observerOptions);
      
      blockObserver.observe(block);
    }
  });
}
</script> 